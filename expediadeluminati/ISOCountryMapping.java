/*
 * ISOCountryMapping.java
 *
 * Copyright (c) 2003 Hotel Reservation Service GmbH
 * All rights reserved.
 */
package de.hrs.marketwatch.webtranslator.processors.expediadeluminati;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;

import org.apache.log4j.Logger;

import de.hrs.marketwatch.common.util.PropertiesFile;

public class ISOCountryMapping {
    /** ISO country codes property filename */
    private static final String COUNTRIES_FILENAME =
        "countries.properties";
   
    /** Log4J debug logger */
    private static final Logger log = Logger.getLogger(Search.class.getName());

    /** ISO country codes */
    private static Properties countryCodes = 
        PropertiesFile.getProperties(COUNTRIES_FILENAME);

    private static ISOCountryMapping instance;

    /**
     * Default constructor.
     */
    public ISOCountryMapping() {}

    /**
     * Returns an instance of <code>ISOCountryMapping</code> class. Instance
     * is created if one does not exist already.<br>
     * Each ISO country property file has a single <code>ISOCountryMapping</code>
     * instance assigned to it.
     * <p>
     * Example of an input properties file (as generated by CountryCompiler):
     * <br><code>
     *      TJ=Tajikistan, Tadschikistan, TJK, 762<br>
     *      TD=Chad, Tschad, TCD, 148<br>
     *      GB=United kingdom, Grossbritannien, GBR, 826<br>
     *      SI=Slovenia, Slowenien, SVN, 705<br></code>
     *
     * @param countryFileName   ISO country property filename (without path,
     *              must be in CLASSPATH)
     *
     * @return a new or existing <code>ISOCountryMapping</code> instance
     *
     * @throws IOException if some error occurrs loading properties file
     * @throws FileNotFoundException if properties file is not found
     */
    public static synchronized ISOCountryMapping getInstance()
          throws IOException, FileNotFoundException {
        
        return (instance != null) ? instance : new ISOCountryMapping(); 
    }

    /**
     * Creates an <code>ISOCountryInfo</code> instance initialized with
     * ISO 3166 two char country code (as key)<br>
     * and other country properties extracted from the
     * <code>countryDesc</code> parameter (as value).<br>
     * Both input parameters are actually key=value pairs from country
     * properties file (e.g. <code>SI=Slovenia, Slowenien, SVN, 705</code>).
     *
     * @param countryCodeISO2   ISO 3166 two char country code
     * @param countryDesc   Other country properties packed in a string
     *
     * @return properly initialized <code>ISOCountryInfo</code> instance
     */
    private ISOCountryInfo getCountryInfo(String countryCodeISO2,
                        String countryDesc) {
        
        int iFirstCommaIdx = countryDesc.indexOf(",");
        int iLastCommaIdx = countryDesc.lastIndexOf(",");
        
        String countryCodeISO3 = countryDesc.substring(iLastCommaIdx-3, iLastCommaIdx);
        String countryCodeISONum = countryDesc.substring(iLastCommaIdx+1);
        String countryNameUs = countryDesc.substring(0, iFirstCommaIdx);
        String countryNameDe = countryDesc.substring(iFirstCommaIdx+1, iLastCommaIdx-5);
        
        ISOCountryInfo isoCountryInfo = new ISOCountryInfo(countryCodeISO2,
                countryCodeISO3,
                countryCodeISONum,
                countryNameUs,
                countryNameDe);
        
        return isoCountryInfo;
    }

    /**
     * Locates country with the specifed ISO 3166 two char country code
     * and returns its full ISO3166 country info inside a
     * <code>ISOCountryInfo</code> instance.
     *
     * @param countryCodeISO2   ISO 3166 two char country code
     *
     * @return matching <code>ISOCountryInfo</code> instance;
     *         otherwise <code>null</code>.
     */
    public ISOCountryInfo getCountryInfoByISO2(String countryCodeISO2) {                
        String countryDesc = (String) countryCodes.get(countryCodeISO2);
        return getCountryInfo(countryCodeISO2, countryDesc);
    }

    /**
     * Locates country with the specifed ISO 3166 three char country code
     * and returns its full ISO3166 country info inside a
     * <code>ISOCountryInfo</code> instance.
     *
     * @param countryCodeISO3   ISO 3166 three char country code
     *
     * @return matching <code>ISOCountryInfo</code> instance;
     *         otherwise <code>null</code>.
     */
    public ISOCountryInfo getCountryInfoByISO3(String countryCodeISO3) {       
        Enumeration e = countryCodes.propertyNames();
        
        while (e.hasMoreElements()) {
            String countryCodeISO2   = (String) e.nextElement();
            String countryProps      = countryCodes.getProperty(countryCodeISO2);
            
            ISOCountryInfo countryInfo = getCountryInfo(countryCodeISO2, countryProps);
            
            if (countryInfo.getCountryCodeISO3().equalsIgnoreCase(countryCodeISO3)) {
                return countryInfo;
            }
        }
        return null;
    }

    /**
     * Locates country with the specifed ISO 3166 three char country
     * number and returns its full ISO3166 country info inside a
     * <code>ISOCountryInfo</code> instance.
     *
     * @param countryCodeISONum     ISO 3166 three char country number
     *
     * @return matching <code>ISOCountryInfo</code> instance;
     *         otherwise <code>null</code>.
     */
    public ISOCountryInfo getCountryInfoByISONum(String countryCodeISONum) {        
        Enumeration e = countryCodes.propertyNames();
        
        while (e.hasMoreElements()) {
            String countryCodeISO2   = (String) e.nextElement();
            String countryProps      = countryCodes.getProperty(countryCodeISO2);
            
            ISOCountryInfo countryInfo = getCountryInfo(countryCodeISO2, countryProps);
            
            if (countryInfo.getCountryCodeISONum().equalsIgnoreCase(countryCodeISONum)) {
                return countryInfo;
            }
        }
        return null;
    }

    /**
     * Locates country with the name specified in German language
     * and returns its full ISO3166 country info inside a
     * <code>ISOCountryInfo</code> instance.
     *
     * @param countryNameDe     country name in German language
     *
     * @return matching <code>ISOCountryInfo</code> instance;
     *         otherwise <code>null</code>.
     */
    public ISOCountryInfo getCountryInfoByNameDe(String countryNameDe) {
        Enumeration e = countryCodes.propertyNames();
        
        while (e.hasMoreElements()) {
            String countryCodeISO2   = (String) e.nextElement();
            String countryProps      = countryCodes.getProperty(countryCodeISO2);
            
            ISOCountryInfo countryInfo = getCountryInfo(countryCodeISO2, countryProps);
            
            if (countryInfo.getCountryNameDe().equalsIgnoreCase(countryNameDe)) {
                return countryInfo;
            }
        }
        return null;
    }


    /**
     * Locates country with the name specified in English language
     * and returns its full ISO3166 country info inside a
     * <code>ISOCountryInfo</code> instance.
     *
     * @param countryNameUs     country name in English language
     *
     * @return matching <code>ISOCountryInfo</code> instance;
     *         otherwise <code>null</code>.
     */
    public ISOCountryInfo getCountryInfoByNameUs(String countryNameUs) {
        Enumeration e = countryCodes.propertyNames();
        
        while (e.hasMoreElements()) {
            String countryCodeISO2   = (String) e.nextElement();
            String countryProps      = countryCodes.getProperty(countryCodeISO2);
            
            ISOCountryInfo countryInfo = getCountryInfo(countryCodeISO2, countryProps);
            
            if (countryInfo.getCountryNameUs().equalsIgnoreCase(countryNameUs)) {
                return countryInfo;
            }
        }
        return null;
    }

}
